import os
import shutil
import csv
import pytesseract
from PIL import Image
import re

# Set the Tesseract executable path
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe' #use your own pytesseract path here

def dms_to_decimal(degrees, minutes, seconds, direction):
    decimal = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
    if direction.upper() in ['S', 'W']:
        decimal = -decimal
    return decimal

def extract_coordinates_ocr(image_path):
    try:
        img = Image.open(image_path).convert('L')  # Convert to grayscale
        text = pytesseract.image_to_string(img)

        # Flexible regex patterns to capture different formats including DMS
        patterns = [
            r'Lat\s([\d.]+)[¬∞]?\sLong\s([\d.]+)[¬∞]?',
            r'Latitude[:\s]+([\d.]+)[,]?\sLongitude[:\s]+([\d.]+)',
            r"Lat\s([+-]?\d+\.\d+)\sLong\s([+-]?\d+\.\d+)",
            r"Latitude\s([+-]?\d+\.\d+)\sLongitude\s([+-]?\d+\.\d+)",
            r"Lat\s([+-]?\d+\.\d+)\s/\sLong\s([+-]?\d+\.\d+)",
            r"([+-]?\d+\.\d+),\s([+-]?\d+\.\d+)",
            r"Lat\s([+-]?\d+\.\d+)¬∞\sLong\s([+-]?\d+\.\d+)¬∞",
            r"Decimal\sLatitude\s([+-]?\d+\.\d+)\sLongitude\s([+-]?\d+\.\d+)",
            r"(\d+\.\d+)\s([+-]?\d+\.\d+)",
            r"([+-]?\d+\.\d+)[\s,]+([+-]?\d+\.\d+)",

            # Flexible DMS (Degrees Minutes Seconds) pattern with optional symbols/spaces
            r'(\d{1,3})[¬∞:\s]+(\d{1,2})[\'‚Äô:\s]+([\d.]+)"?\s*([NS]),?\s*(\d{1,3})[¬∞:\s]+(\d{1,2})[\'‚Äô:\s]+([\d.]+)"?\s*([EW])',
            r'(\d{1,3})[¬∞:\s]+(\d{1,2})[\'‚Äô:\s]+([\d.]+)"?\s*([NS])\s+(\d{1,3})[¬∞:\s]+(\d{1,2})[\'‚Äô:\s]+([\d.]+)"?\s*([EW])'
        ]

        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()
                if len(groups) == 2:
                    return float(groups[0]), float(groups[1])
                elif len(groups) == 8:
                    lat_deg, lat_min, lat_sec, lat_dir = groups[0], groups[1], groups[2], groups[3]
                    lon_deg, lon_min, lon_sec, lon_dir = groups[4], groups[5], groups[6], groups[7]
                    latitude = dms_to_decimal(lat_deg, lat_min, lat_sec, lat_dir)
                    longitude = dms_to_decimal(lon_deg, lon_min, lon_sec, lon_dir)
                    return latitude, longitude

    except Exception as e:
        print(f"Error processing OCR for {image_path}: {e}")

    return None, None

def process_images_with_ocr(folder_path, output_csv, found_folder, not_found_folder):
    os.makedirs(found_folder, exist_ok=True)
    os.makedirs(not_found_folder, exist_ok=True)

    images = [f for f in os.listdir(folder_path) if f.lower().endswith(('.jpg', '.jpeg'))]

    found_count = 0
    not_found_count = 0
    total_images = len(images)

    with open(output_csv, mode='w', newline='', encoding='utf-8') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(["Filename", "Latitude", "Longitude"])

        for image_name in images:
            image_path = os.path.join(folder_path, image_name)
            latitude, longitude = extract_coordinates_ocr(image_path)

            if latitude is not None and longitude is not None:
                found_count += 1
                shutil.move(image_path, os.path.join(found_folder, image_name))
                csv_writer.writerow([image_name, latitude, longitude])
                print(f"‚úÖ {image_name} -> Coords Found: {latitude}, {longitude}")
            else:
                not_found_count += 1
                shutil.move(image_path, os.path.join(not_found_folder, image_name))
                csv_writer.writerow([image_name, "NILL", "NILL"])
                print(f"‚ùå {image_name} -> No Coords Found")

    print(f"\n‚úÖ Processing Complete. CSV saved at: {output_csv}")
    print(f"üì∏ Total images processed: {total_images}")
    print(f"‚úÖ Images with coordinates found: {found_count}")
    print(f"‚ùå Images without coordinates: {not_found_count}")

#Set your folder paths here (all file paths are mind)
folder_path = r"F:\Office Data\Lahore Development Program (LDP)\Image Files\Only images\1127 to end 2\Images"
output_csv = r"F:\Office Data\Lahore Development Program (LDP)\Image Files\Only images\1127 to end 2\o.csv"
found_folder = r"F:\Office Data\Lahore Development Program (LDP)\Image Files\Only images\1127 to end 2\f"
not_found_folder = r"F:\Office Data\Lahore Development Program (LDP)\Image Files\Only images\1127 to end 2\nf"

# Run the script
process_images_with_ocr(folder_path, output_csv, found_folder, not_found_folder)
